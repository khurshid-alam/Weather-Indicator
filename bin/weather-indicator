#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# Copyright (C) 2010 Sebastian MacDonald Sebas310@gmail.com
# Copyright (C) 2010 Mehdi Rejraji mehd36@gmail.com
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import os
import gtk
import pygtk
pygtk.require('2.0')
import gobject
import appindicator
import gconf
import urllib2
import time
from threading import Timer
import thread
import locale
from xml.dom.minidom import parseString

import gettext
from gettext import gettext as _
gettext.textdomain('weather-indicator')

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'weather_indicator'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from weather_indicator.helpers import get_builder

gconfClient = gconf.client_get_default()

class Weather_Indicator:
    def __init__(self):
        self.winder = appindicator.Indicator ("weather-indicator", "stock_weather-cloudy", appindicator.CATEGORY_APPLICATION_STATUS)
        self.winder.set_status (appindicator.STATUS_ACTIVE)
        self.winder.set_attention_icon ("ubuntuone-client-error")
        
        first_run = gconfClient.get_bool("/apps/weather-indicator/first_run")
        self.rate = gconfClient.get_int("/apps/weather-indicator/refresh_rate")
        self.unit = gconfClient.get_string("/apps/weather-indicator/unit")
        #WIND#self.windunit = gconfClient.get_string("/apps/weather-indicator/wind")
        self.placechosen = gconfClient.get_int("/apps/weather-indicator/placechosen")
        
        if self.placechosen in (False, None):
            gconfClient.set_int("/apps/weather-indicator/placechosen", 0)
            self.placechosen = 0
        
        if self.unit in (False, None):
            gconfClient.set_string("/apps/weather-indicator/unit", 'F')
            self.unit = 'F'
        
        #if self.wind in (False, None):
            #gconfClient.set_string("/apps/weather-indicator/wind", 'mph')
            #self.windunit = 'mph'
            
        if self.rate in (False, None):
            gconfClient.set_int("/apps/weather-indicator/refresh_rate", 5)
            self.rate = self.rate = gconfClient.get_int("/apps/weather-indicator/refresh_rate")
        
        self.menu = gtk.Menu()

        '''self.city_show = gtk.MenuItem()
        self.city_table = gtk.Table(1, 2, True)
        self.city_show.add(self.city_table)
        city_adder = gtk.Label("City")
        self.city_table.attach(city_adder, 0, 1, 0, 1)
        city_adder.show()
        self.city_show.show_all()
        self.menu.append(self.city_show)'''
        
    ##City
        self.city_show = gtk.MenuItem()
        self.city_show.set_sensitive(False)
        self.menu.attach(self.city_show,1,2,0,1)
        self.city_show.show()
        
    ##Condition
        self.cond_show = gtk.MenuItem()
        self.cond_show.set_sensitive(False)
        self.cond_show.show()
        self.menu.append(self.cond_show)
        
    ##Temperature        
        self.temp_show = gtk.MenuItem()
        self.temp_show.set_sensitive(False)
        self.temp_show.show()
        self.menu.append(self.temp_show)
        
    ##Humidity
        self.humid_show = gtk.MenuItem()
        self.humid_show.set_sensitive(False)
        self.humid_show.show()
        self.menu.append(self.humid_show)
        
    ##Wind
        self.wind_show = gtk.MenuItem()
        self.wind_show.set_sensitive(False)
        self.wind_show.show()
        self.menu.append(self.wind_show)
                
    ##If this is the first run : newlocation, then update the menu elements above.
        if first_run in (False, None):
            self.firsty()
        
        ##WORKAROUND For new places registration
        oldplace = gconfClient.get_string("/apps/weather-indicator/place")
        newplaces = gconfClient.get_string("/apps/weather-indicator/places")
        if not(oldplace in (False, None)) and newplaces in (False, None):
            self.places = gconfClient.get_string("/apps/weather-indicator/place").split('|')
            gconfClient.set_string("/apps/weather-indicator/places", str(self.places))
        ##Workaround end.
            
        self.places = eval(gconfClient.get_string("/apps/weather-indicator/places"))
        print 'Location(s) :',self.places        
        
    ##Cities
        if len(self.places) != 1:
            ##Breaker
            breaker = gtk.SeparatorMenuItem()
            breaker.show()
            self.menu.append(breaker)
            
            loco1 = gtk.RadioMenuItem(None, self.places[0])
            if self.placechosen == 0:
                loco1.set_active(True)
            loco1.connect("toggled", self.on_city_changed)
            loco1.show()
            self.menu.append(loco1)
            for place in self.places[1:]:
                loco = gtk.RadioMenuItem(loco1, place)
                if self.places.index(place) == self.placechosen:
                    loco.set_active(True)
                loco.connect("toggled", self.on_city_changed)
                loco.show()
                self.menu.append(loco)
        
    ##Breaker
        breaker = gtk.SeparatorMenuItem()
        breaker.show()
        self.menu.append(breaker)
        
    ###Change City
        #replace = gtk.MenuItem("Change City")
        #replace.connect("activate", self.replacer)
        #replace.show()
        #self.menu.append(replace)

    ##Add City
        #add = gtk.MenuItem("Add City")
        #add.connect("activate", self.adder)
        #add.show()
        #self.menu.append(add)

    ###Breaker
        #breaker = gtk.SeparatorMenuItem()
        #breaker.show()
        #self.menu.append(breaker)
        
        
        ext_show = gtk.MenuItem(_("Extended Forecast..."))
        ext_show.connect("activate", self.extforecast)
        ext_show.show()
        self.menu.append(ext_show)
    ##Preferences      
        prefs_show = gtk.MenuItem(_("Weather Preferences..."))
        prefs_show.connect("activate", self.prefs)
        prefs_show.show()
        self.menu.append(prefs_show)
        
        self.place = self.places[self.placechosen]
        self.update_weather()
        
        self.winder.set_menu(self.menu)
        #im = IndicatorMenu()
        #self.winder.set_menu(im)
        
        
    def on_city_changed(self,widget):
        if widget.get_active():
            self.placechosen = self.places.index(widget.get_label())
            gconfClient.set_int("/apps/weather-indicator/placechosen", self.placechosen)
            self.update_weather()

    def update_weather(self, widget=None):
        current = self.get_weather(self.places[self.placechosen])
        
        self.condition = current
        
        print 'Update :',current,'(every',self.rate,'min.)'
        
        current = self.icon
        
        if current in ('chance_of_storm', 'storm', 'thunderstorm', 'chance_of_tstorm'):
            self.storms()
        elif current in ('sleet',  'snow',  'icy',  'flurries',  'chance_of_snow'):
            self.snow()
        elif current in ('dust',  'fog',  'smoke',  'haze',  'mist'):
            self.fog()
        elif current in ('chance_of_rain',  'rain'):
            self.showers()
        elif current in ('sunny', 'clear'):
            self.clear()
        elif current in ('mostly_cloudy', 'cloudy'):
            self.cloudy()
        elif current in ('mostly_sunny',  'partly_cloudy'):
            self.few_clouds()
        else:
            self.err()
        #self.city_table.attach(gtk.Label("City"), 0, 1, 0, 1)
        
        self.city_show.set_label(self.city)
        self.cond_show.set_label(self.condition)
        self.temp_show.set_label(self.temp)
        self.humid_show.set_label(self.humid)
        self.wind_show.set_label(self.wind)
        
        self.rateid = gobject.timeout_add(int(self.rate) * 60000, self.update_weather)
                            
    def showers(self):
        self.winder.set_icon("stock_weather-showers")
        
    def storms(self):
        self.winder.set_icon("stock_weather-storm")
        
    def cloudy(self):
        self.winder.set_icon("stock_weather-cloudy")
        
    def few_clouds(self):
        self.winder.set_icon("weather-few-clouds")
    
    def fog(self):
        self.winder.set_icon("stock_weather-fog")    
        
    def clear(self):
        self.winder.set_icon("stock_weather-sunny")
        
    def snow(self):
        self.winder.set_icon("stock_weather-snow")
        
    def severe(self):
        self.winder.set_icon("weather-severe-alert")
    
    def err(self):
        self.winder.set_icon("ubuntuone-client-error")

    def hide_dialog(self, widget, data):
        widget.hide()
    
    def firsty(self):
        self.get_weather('London, UK',True)
        self.getText()
    
    def replacer(self, widget):
        self.getText()
        
    def adder(self, widget):
        self.getText(replace=False)
            
    def responseToDialog(self, entry, dialog, response):
        dialog.response(response)
        
    def getText(self, replace=True):
        dialog = gtk.MessageDialog(
            None,
            gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
            gtk.MESSAGE_QUESTION,
            gtk.BUTTONS_OK,
            None)
        dialog.set_markup('Please enter your address:')
        entry = gtk.Entry()
        entry.connect("activate", self.responseToDialog, dialog, gtk.RESPONSE_OK)
        hbox = gtk.HBox()
        hbox.pack_start(gtk.Label("Address:"), False, 5, 5)
        hbox.pack_end(entry)
        dialog.vbox.pack_end(hbox, True, True, 0)
        dialog.show_all()
        dialog.run()
        if replace == False:
            if not (entry.get_text() in self.places):
                self.places.append(entry.get_text())
                gconfClient.set_string("/apps/weather-indicator/places", str(self.places))
                dialog.destroy()
                return True
            else:
                dialog.destroy()
                return False
        else:
            self.places = ['']
            self.places[0] = entry.get_text()
            gconfClient.set_string("/apps/weather-indicator/places", str(self.places))
        gconfClient.set_bool("/apps/weather-indicator/first_run", True)
        dialog.destroy()
        
        self.update_weather()
        
    def get_weather(self, city, firstrun=False, extended=False):
        #create google weather api url
        import locale
        localebad = locale.getlocale()[0]
        locale = localebad.split ('_')
        url = "http://www.google.com/ig/api?weather=" + urllib2.quote(city) + "&hl=" + locale[0]
        
        try:
            # open google weather api url
            f = urllib2.urlopen(url)

        except:
            # if there was an error opening the url, return
            self.temp = "Connexion Problem"
            self.city = "Connexion Problem"
            self.humid = "Connexion Problem"
            self.wind = "Connexion Problem"
            self.icon = "Connexion Problem"
            return "Error opening url"
        
        s = f.read()
        encoding = f.headers['content-type'].split('charset=')[-1]
        s = unicode(s, encoding).encode('utf-8').replace("&#39;", "'")
        
        # extract weather condition data from xml string
        if extended == False:
            weather = s.split("<current_conditions><condition data=\"")[-1].split("\"")[0]
            
            self.unitsystem = s.split("<unit_system data=\"")[-1].split("\"")[0]
            if firstrun and self.unitsystem == 'SI':
                    self.unit = 'C'
                    gconfClient.set_string("/apps/weather-indicator/unit", 'C')
                    #self.windunit = 'km/h'
                    #gconfClient.set_string("/apps/weather-indicator/wind", 'km/h')
            
            if self.unit == 'F':
                self.temp = s.split("<temp_f data=\"")[-1].split("\"")[0] + "°F"
            elif self.unit == 'C':
                self.temp = s.split("<temp_c data=\"")[-1].split("\"")[0] + "°C"
            else:
                self.temp = str(int(s.split("<temp_c data=\"")[-1].split("\"")[0])+273) + "°K"
            self.city = s.split("<city data=\"")[-1].split("\"")[0]
            self.humid = s.split("<humidity data=\"")[-1].split("\"")[0]
            self.wind = s.split("<wind_condition data=\"")[-1].split("\"")[0]
            
            #windvalue = int(''.join(filter(lambda x: x.isdigit(), self.wind)))
            #if unitsystem == 'US':
                #windvalue = int(round(float(windvalue*1.609344)))
            #if self.windunit == 'm/s':
                #windvalue = int(round(float(windvalue/3.6)))
            #elif self.windunit == 'mph':
                #print 'im here'
                #windvalue = int(round(float(windvalue/1.609344)))
                #print windvalue
            #elif self.windunit == 'knots':
                #windvalue = int(round(float(windvalue/1.852)))
            #elif self.windunit == 'Beaufort':
                #if windvalue < 1:
                    #windvalue = 0
                #elif windvalue >= 1 and windvalue < 5:
                    #windvalue = 1
                #elif windvalue >= 6 and windvalue < 11:
                    #windvalue = 2
                #elif windvalue >= 12 and windvalue < 19:
                    #windvalue = 3
                #elif windvalue >= 20 and windvalue < 28:
                    #windvalue = 4
                #elif windvalue >= 29 and windvalue < 38:
                    #windvalue = 5
                #elif windvalue >= 39 and windvalue < 49:
                    #windvalue = 6
                #elif windvalue >= 50 and windvalue < 61:
                    #windvalue = 7
                #elif windvalue >= 62 and windvalue < 74:
                    #windvalue = 8
                #elif windvalue >= 75 and windvalue < 88:
                    #windvalue = 9
                #elif windvalue >= 89 and windvalue < 102:
                    #windvalue = 10
                #elif windvalue >= 103 and windvalue < 117:
                    #windvalue = 11
                #elif windvalue >= 118:
                    #windvalue = 12
            #self.wind = self.wind.replace((''.join(filter(lambda x: x.isdigit(), self.wind))),str(windvalue))
            
            self.icon = s.split("%\"/><icon data=\"/ig/images/weather/")[-1].split(".gif\"")[0]
    
            # if there was an error getting the condition, the city is invalid
            if weather == "<?xml version=":
                self.temp = "Invalid city"
                self.city = "Invalid city"
                self.humid = "Invalid city"
                self.wind = "Invalid city"
                return "Invalid city"
    
            #return the weather condition
            return weather
        else:
            parsed = parseString(s)
            self.daysofweek=[]
            for day_of_week in parsed.getElementsByTagName("day_of_week"):
                self.daysofweek.append([day_of_week.attributes["data"].value][0])
            self.lowdata=[]
            for low in parsed.getElementsByTagName("low"):
                self.lowdata.append([low.attributes["data"].value][0])
            self.highdata=[]
            for high in parsed.getElementsByTagName("high"):
                self.highdata.append([high.attributes["data"].value][0])
            self.icons=[]
            for icon in parsed.getElementsByTagName("icon"):
                self.icons.append([icon.attributes["data"].value][0].split("/ig/images/weather/")[-1].split(".gif")[0])
            self.conditions=[]
            for condition in parsed.getElementsByTagName("condition"):
                self.conditions.append([condition.attributes["data"].value][0])
        
    def prefs(self, widget):
        prefswindow = PreferencesWeatherIndicatorDialog()
        
        prefswindow.show()
        
    def extforecast(self,widget):
        forecastwd = ExtendedForecast()
        forecastwd.show()

class PreferencesWeatherIndicatorDialog(gtk.Dialog):
    __gtype_name__ = "PreferencesWeatherIndicatorDialog"
    def __new__(cls):
        builder = get_builder('PreferencesWeatherIndicatorDialog')
        new_object = builder.get_object("preferences_weather_indicator_dialog")
        new_object.finish_initializing(builder)
        return new_object

    def finish_initializing(self, builder):
        self.builder = builder
        if wi.unit == 'F':
            self.builder.get_object('fahrenheit').set_active(True)
        elif wi.unit == 'C':
            self.builder.get_object('celsius').set_active(True)
        else:
            self.builder.get_object('kelvin').set_active(True)
        #if wi.windunit == 'm/s':
            #self.builder.get_object('m/s').set_active(True)
        #elif wi.windunit == 'km/h':
            #self.builder.get_object('km/h').set_active(True)
        #elif wi.windunit == 'mph':
            #self.builder.get_object('mph').set_active(True)
        #elif wi.windunit == 'knots':
            #self.builder.get_object('knots').set_active(True)
        #else:
            #self.builder.get_object('Beaufort').set_active(True)
        
        self.builder.get_object('rate').set_value(wi.rate)
        end = len(wi.places)
        for place in wi.places:
            newplace = ['']
            newplace[0]=place
            self.builder.get_object('citieslist').append(newplace)
            
        self.builder.connect_signals(self)
        
    def on_remove_location(self,widget):
        selection = self.builder.get_object('displaylist').get_selection()
        result = selection.get_selected()
        model, iter = result
        if iter != None and len(wi.places)>1:
            wi.places.remove(model[iter][0])
            wi.placechosen = 0
            model.remove(iter)
            gconfClient.set_string("/apps/weather-indicator/places", str(wi.places))
            gconfClient.set_int("/apps/weather-indicator/placechosen", 0)
    
    def on_edit_location(self, widget):
        
        def responseToDialog(entry, dialog, response):
            dialog.response(response)
            
        selection = self.builder.get_object('displaylist').get_selection()
        result = selection.get_selected()
        model, iter = result
        if iter !=None:
            dialog = gtk.MessageDialog(
                None,
                gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
                gtk.MESSAGE_QUESTION,
                gtk.BUTTONS_OK,
                None)
            dialog.set_markup('You can modify this place :')
            entry = gtk.Entry()
            entry.set_text(model[iter][0])
            entry.connect("activate", responseToDialog, dialog, gtk.RESPONSE_OK)
            hbox = gtk.HBox()
            hbox.pack_start(gtk.Label("Address:"), False, 5, 5)
            hbox.pack_end(entry)
            dialog.vbox.pack_end(hbox, True, True, 0)
            dialog.show_all()
            dialog.run()

            ep = entry.get_text()
            dialog.destroy()
            if ep != '' and not (ep in wi.places):
                wi.places[wi.places.index(model[iter][0])]=ep
                gconfClient.set_string("/apps/weather-indicator/places", str(wi.places))
                model.set_value(iter,0,ep)
    
    def on_add_location(self, widget):
        success = wi.getText(replace=False)
        if success:
            newplace = ['']
            newplace[0]=wi.places[len(wi.places)-1]
            self.builder.get_object('citieslist').append(newplace)
    
    def on_wind_activate(self, widget):
        pass
    
    def on_destroy(self, widget, data=None):
        pass
        #"""Called when the WeatherIndicatorWindow is closed."""
        #gtk.main_quit()
    
    def ok(self, widget, data=None):
        """The user has elected to save the changes.

        Called before the dialog returns gtk.RESONSE_OK from run().
        """
        needupdate = False
        ##Temperature##
        for button in self.builder.get_object('fahrenheit').get_group():
            if button.get_active() == True and button.get_label()[0] != wi.unit:
                gconfClient.set_string("/apps/weather-indicator/unit", button.get_label()[0])
                wi.unit = button.get_label()[0]
                needupdate = True
                print 'Unit changed :', wi.unit
                
        ##Rate
        if int(self.builder.get_object('rate').get_value()) != wi.rate:
            gconfClient.set_int("/apps/weather-indicator/refresh_rate", int(self.builder.get_object('rate').get_value()))
            wi.rate = int(self.builder.get_object('rate').get_value())
            gobject.source_remove(wi.rateid)
            wi.rateid = gobject.timeout_add(int(wi.rate) * 60000, wi.update_weather)
            print 'Rate changed :',wi.rate
            
        ##Wind
        #for button in self.builder.get_object('m/s').get_group():
            #if button.get_active() == True and button.get_label() != wi.windunit:
                #gconfClient.set_string("/apps/weather-indicator/wind", button.get_label())
                #wi.windunit = button.get_label()
                #needupdate = True
                #print 'Wind changed :', wi.windunit
        
        if needupdate:
            wi.update_weather()
        
        # Make any updates to self._preferences here. e.g.
        #self._preferences["preference1"] = "value2"
        #self._save_preferences()
        self.destroy()

    def cancel(self, widget, data=None):
        """The user has elected cancel changes.

        Called before the dialog returns gtk.RESPONSE_CANCEL for run()
        """
        # Restore any changes to self._preferences here.
        self.destroy()
        
class ExtendedForecast(gtk.Window):
    __gtype_name__ = "ExtendedForecast"
    def __new__(cls):
        builder = get_builder('ExtendedForecast')
        new_object = builder.get_object("extended_forecast")
        new_object.finish_initializing(builder)
        return new_object
        
    def finish_initializing(self, builder):
        self.builder = builder
        self.builder.connect_signals(self)
        
        self.builder.get_object('extended_forecast').set_title(_('Extended Forecast for ')+wi.places[wi.placechosen])
        
        wi.get_weather(wi.places[wi.placechosen],False,True)
        
        self.builder.get_object('day1lbl').set_label('<big>'+wi.daysofweek[0].capitalize()+'</big>')
        self.builder.get_object('day2lbl').set_label('<big>'+wi.daysofweek[1].capitalize()+'</big>')
        self.builder.get_object('day3lbl').set_label('<big>'+wi.daysofweek[2].capitalize()+'</big>')
        self.builder.get_object('day4lbl').set_label('<big>'+wi.daysofweek[3].capitalize()+'</big>')
        i=0
        for icon in wi.icons[1:]:
            i=i+1
            if icon in ('chance_of_storm', 'storm', 'thunderstorm', 'chance_of_tstorm'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-storm',gtk.ICON_SIZE_BUTTON)
            elif icon in ('sleet',  'snow',  'icy',  'flurries',  'chance_of_snow'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-snow',gtk.ICON_SIZE_BUTTON)
            elif icon in ('dust',  'fog',  'smoke',  'haze',  'mist'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-fog',gtk.ICON_SIZE_BUTTON)
            elif icon in ('rain'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-showers',gtk.ICON_SIZE_BUTTON)
            elif icon in ('chance_of_rain'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-showers-scattered',gtk.ICON_SIZE_BUTTON)
            elif icon in ('sunny', 'clear'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-clear',gtk.ICON_SIZE_BUTTON)
            elif icon in ('mostly_cloudy', 'cloudy'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-overcast',gtk.ICON_SIZE_BUTTON)
            elif icon in ('mostly_sunny',  'partly_cloudy'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-few-clouds',gtk.ICON_SIZE_BUTTON)
            else:
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('window-close',gtk.ICON_SIZE_BUTTON)
        i=0
        for condition in wi.conditions[1:]:
            i=i+1
            self.builder.get_object('day%scond' % str(i)).set_label(condition)
        i=0
        if wi.unitsystem == 'SI':
            tempunit = '°C'
        else:
            tempunit = '°F'
        for high in wi.highdata:
            i=i+1
            self.builder.get_object('day%stemphigh' % str(i)).set_label(_('High : %s%s') % (high,tempunit))
        i=0
        for low in wi.lowdata:
            i=i+1
            self.builder.get_object('day%stemplow' % str(i)).set_label(_('Low : %s%s') % (low,tempunit))
        
    
    def close(self, widget, data=None):
        self.destroy()
    
    def on_destroy(self, widget, data=None):
        pass

#class EditPlace(gtk.MessageDialog):
    #__gtype_name__ = "EditPlace"
    #def __new__(cls):
        #builder = get_builder('EditPlace')
        #new_object = builder.get_object("edit_place")
        #new_object.finish_initializing(builder)
        #return new_object
        
    #def finish_initializing(self, builder):
        #self.builder = builder
        #self.builder.connect_signals(self)
    
    #def ok(self, widget, data=None):
        #self.destroy()
        #if self.builder.get_object("entry").get_text() != '':
            #return self.builder.get_object("entry").get_text()
        #else:
            #return False
        ###APPLY CHANGES
        
    #def cancel(self, widget, data=None):
        #"""The user has elected cancel changes.

        #Called before the dialog returns gtk.RESPONSE_CANCEL for run()
        #"""
        ## Restore any changes to self._preferences here.
        #self.destroy()
        #return False
        

#class IndicatorMenu(gtk.Menu):
    #__gtype_name__ = "IndicatorMenu"
    #def __new__(cls):
        #builder = get_builder('IndicatorMenu')
        #new_object = builder.get_object("indicator_menu")
        #new_object.finish_initializing(builder)
        #return new_object
        
    #def finish_initializing(self, builder):
        #self.builder = builder
        #self.builder.connect_signals(self)

def main():
    gtk.main()
    return 0

if __name__ == "__main__":
    wi = Weather_Indicator()
    main()
