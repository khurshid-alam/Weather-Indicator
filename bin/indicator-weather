#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# Copyright (C) 2010 Sebastian MacDonald Sebas310@gmail.com
# Copyright (C) 2010 Mehdi Rejraji mehd36@gmail.com
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

import sys
import os
import gtk
import pygtk
pygtk.require('2.0')
import gobject
import appindicator
import gconf
import urllib2
#import time
import re
import datetime
import simplejson
#from threading import Timer
#import thread
import locale
import pynotify
from xml.dom.minidom import parseString

import gettext
from gettext import gettext as _
gettext.textdomain('indicator-weather')

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'indicator_weather'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

from indicator_weather.helpers import get_builder

gconfClient = gconf.client_get_default()

class indicator_weather:
    def __init__(self):
        self.winder = appindicator.Indicator ("indicator-weather", "weather-clear", appindicator.CATEGORY_OTHER)
        self.winder.set_status (appindicator.STATUS_ACTIVE)
        self.winder.set_attention_icon ("ubuntuone-client-error")
        
        self.rate = gconfClient.get_int("/apps/indicator-weather/refresh_rate")
        self.unit = gconfClient.get_string("/apps/indicator-weather/unit")
        self.notif = gconfClient.get_string("/apps/indicator-weather/notif")
        #WIND#self.windunit = gconfClient.get_string("/apps/indicator-weather/wind")
        self.placechosen = gconfClient.get_int("/apps/indicator-weather/placechosen")
        self.labels = gconfClient.get_string("/apps/indicator-weather/places")
        self.places = gconfClient.get_string("/apps/indicator-weather/places")
        self.placesid = gconfClient.get_string("/apps/indicator-weather/placesid")
        
        if self.placechosen in (False, None):
            gconfClient.set_int("/apps/indicator-weather/placechosen", 0)
            self.placechosen = 0
        
        if self.unit in (False, None):
            gconfClient.set_string("/apps/indicator-weather/unit", 'F')
            self.unit = 'F'
            
        if self.notif in (False, None):
            gconfClient.set_string("/apps/indicator-weather/notif", 'N')
            self.notif = 'N'
        
        #if self.wind in (False, None):
            #gconfClient.set_string("/apps/indicator-weather/wind", 'mph')
            #self.windunit = 'mph'
            
        if self.rate in (False, None):
            gconfClient.set_int("/apps/indicator-weather/refresh_rate", 5)
            self.rate = self.rate = gconfClient.get_int("/apps/indicator-weather/refresh_rate")
            
        if self.places in (False, None, '[]', "['']",):
            self.menu_noplace()
        else:
            
            self.places = eval(self.places)
            self.menu_normal()
            self.place = self.places[self.placechosen]
            self.update_weather()
            self.winder.set_menu(self.menu)
            
    def menu_noplace(self):
        menu_noplace = gtk.Menu()
        setup = gtk.MenuItem(_("Set Up Weather..."))
        setup.connect("activate", self.placeadding)
        setup.show()
        menu_noplace.append(setup)
        self.winder.set_menu(menu_noplace)
    
    def menu_normal(self):
        self.menu = gtk.Menu()
            
    ##City
        self.city_show = gtk.MenuItem()
        self.city_show.set_sensitive(False)
        self.menu.append(self.city_show)
        self.city_show.show()
        
    ##Condition
        self.cond_show = gtk.MenuItem()
        self.cond_show.set_sensitive(False)
        self.cond_show.show()
        self.menu.append(self.cond_show)
        
    ##Temperature        
        self.temp_show = gtk.MenuItem()
        self.temp_show.set_sensitive(False)
        self.temp_show.show()
        self.menu.append(self.temp_show)
        
    ##Humidity
        self.humid_show = gtk.MenuItem()
        self.humid_show.set_sensitive(False)
        self.humid_show.show()
        self.menu.append(self.humid_show)
        
    ##Wind
        self.wind_show = gtk.MenuItem()
        self.wind_show.set_sensitive(False)
        self.wind_show.show()
        self.menu.append(self.wind_show)
                
    ##Sunrise
        self.sunrise_show = gtk.MenuItem()
        self.sunrise_show.set_sensitive(False)
        self.sunrise_show.show()
        self.menu.append(self.sunrise_show)

    ##Sunset
        self.sunset_show = gtk.MenuItem()
        self.sunset_show.set_sensitive(False)
        self.sunset_show.show()
        self.menu.append(self.sunset_show)
        ###WORKAROUND For new places registration
        #oldplace = gconfClient.get_string("/apps/indicator-weather/place")
        #newplaces = gconfClient.get_string("/apps/indicator-weather/places")
        #if not(oldplace in (False, None)) and newplaces in (False, None):
            #self.places = gconfClient.get_string("/apps/indicator-weather/place").split('|')
            #gconfClient.set_string("/apps/indicator-weather/places", str(self.places))
        ###Workaround end.
        
    ##Cities
        if len(self.places) != 1:
            ##Breaker
            breaker = gtk.SeparatorMenuItem()
            breaker.show()
            self.menu.append(breaker)
            
            loco1 = gtk.RadioMenuItem(None, self.places[0][1])
            if self.placechosen == 0:
                loco1.set_active(True)
            loco1.connect("toggled", self.on_city_changed)
            loco1.show()
            self.menu.append(loco1)
            for place in self.places[1:]:
                loco = gtk.RadioMenuItem(loco1, place[1])
                if self.places.index(place) == self.placechosen:
                    loco.set_active(True)
                loco.connect("toggled", self.on_city_changed)
                loco.show()
                self.menu.append(loco)
        
    ##Breaker
        breaker = gtk.SeparatorMenuItem()
        breaker.show()
        self.menu.append(breaker)
        
        ext_show = gtk.MenuItem(_("Forecast..."))
        ext_show.connect("activate", self.extforecast)
        ext_show.show()
        self.menu.append(ext_show)
    ##Preferences      
        prefs_show = gtk.MenuItem(_("Preferences..."))
        prefs_show.connect("activate", self.prefs)
        prefs_show.show()
        self.menu.append(prefs_show)
        
        #im = IndicatorMenu()
        #self.winder.set_menu(im)
        
    def placeadding(self,widget):
        self.placeadded = ''
        self.assistant = Assistant()
        self.assistant.show()
        
    def rebuild_menu(self):
        for item in self.menu.get_children()[7:len(self.menu.get_children())]:
            item.destroy()
        
    ##Cities
        if len(self.places) != 1:
            ##Breaker
            breaker = gtk.SeparatorMenuItem()
            breaker.show()
            self.menu.append(breaker)
            
            loco1 = gtk.RadioMenuItem(None, self.places[0][1])
            if self.placechosen == 0:
                loco1.set_active(True)
            loco1.connect("toggled", self.on_city_changed)
            loco1.show()
            self.menu.append(loco1)
            for place in self.places[1:]:
                loco = gtk.RadioMenuItem(loco1, place[1])
                if self.places.index(place) == self.placechosen:
                    loco.set_active(True)
                loco.connect("toggled", self.on_city_changed)
                loco.show()
                self.menu.append(loco)
    ##Breaker
        breaker = gtk.SeparatorMenuItem()
        breaker.show()
        self.menu.append(breaker)
        
        ext_show = gtk.MenuItem(_("Forecast..."))
        ext_show.connect("activate", self.extforecast)
        ext_show.show()
        self.menu.append(ext_show)
    ##Preferences      
        prefs_show = gtk.MenuItem(_("Preferences..."))
        prefs_show.connect("activate", self.prefs)
        prefs_show.show()
        self.menu.append(prefs_show)
        
        self.winder.set_menu(self.menu)

    def on_city_changed(self,widget):
        if widget.get_active():
            for place in self.places:
                if (place[1] == widget.get_label()):
                    self.placechosen = self.places.index(place)
                    break
            gconfClient.set_int("/apps/indicator-weather/placechosen", self.placechosen)
            self.update_weather(False)

    def update_weather(self, notif=True,widget=None):
        current = self.get_weather(self.places[self.placechosen])
        result = self.get_sun(self.places[self.placechosen])
        if result != None:
			sunrise,sunset,timezone = result
			now = datetime.datetime.now().time()
			sunrise_t = datetime.time(int(sunrise.split(':')[0]), int(sunrise.split(':')[1]), int(sunrise.split(':')[2]))
			sunset_t = datetime.time(int(sunset.split(':')[0]), int(sunset.split(':')[1]), int(sunset.split(':')[2]))
			if now<sunrise_t or now>sunset_t:
				night = True
			else:
				night = False
        else:
			for item in self.menu.get_children()[0:len(self.menu.get_children())]:
				item.destroy()
			self.problem_show = gtk.MenuItem(_("Connection problem"))
			self.problem_show.set_sensitive(False)
			self.problem_show.show()
			self.menu.append(self.problem_show)
			self.winder.set_icon("ubuntuone-client-error")
			return
		
        self.condition = current
        
        print 'Update :',current,'(every',self.rate,'min. for',self.places[self.placechosen][1]+')'
        
        current = self.icon
        
        if current in ('chance_of_storm', 'storm'):
            self.winder.set_icon("weather-storm")
            a="weather-storm"
        elif current in ('thunderstorm', 'chance_of_tstorm'):
            self.winder.set_icon("weather-severe-alert")
            a="weather-severe-alert"
        elif current in ('sleet',  'snow',  'icy',  'flurries',  'chance_of_snow'):
            self.winder.set_icon("weather-snow")
            a= "weather-snow"
        elif current in ('dust',  'fog',  'smoke',  'haze',  'mist'):
            self.winder.set_icon("weather-fog")
            a="weather-fog" 
        elif current == 'rain':
            self.winder.set_icon("weather-showers")
            a="weather-showers"
        elif current == 'chance_of_rain':
            self.winder.set_icon("weather-showers-scattered")
            a = "weather-showers-scattered"
        elif current in ('sunny', 'clear'):
            if night:
                self.winder.set_icon("weather-clear-night")
                a="weather-clear-night"
            else:
                self.winder.set_icon("weather-clear")
                a="weather-clear"
        elif current in ('mostly_cloudy', 'cloudy'):
            if night:
                self.winder.set_icon("weather-clouds-night")
                a="weather-clouds-night"
            else:
                self.winder.set_icon("weather-clouds")
                a="weather-clouds"
        elif current in ('mostly_sunny',  'partly_cloudy'):
            if night:
                self.winder.set_icon("weather-few-clouds-night")
                a="weather-few-clouds-night"
            else:    
                self.winder.set_icon("weather-few-clouds")
                a="weather-few-clouds"
        else:
            self.winder.set_icon("ubuntuone-client-error")
            a=False
        #self.city_table.attach(gtk.Label("City"), 0, 1, 0, 1)
        
        self.city_show.set_label(self.cityLabel)
        self.cond_show.set_label(self.condition)
        self.temp_show.set_label(self.temp)
        self.humid_show.set_label(self.humid)
        self.wind_show.set_label(self.wind)
        import time
        if result != None:
			self.sunrise_show.set_label(_('Sunrise: ')+time.strftime('%X',time.strptime(sunrise,'%H:%M:%S')))
			self.sunset_show.set_label(_('Sunset: ')+time.strftime('%X',time.strptime(sunset,'%H:%M:%S')))
        
        if self.notif != 'N' and a != False and notif:
	        if self.condition != gconfClient.get_string("/apps/indicator-weather/current") and self.notif == 'U':
	            self.notify(self.condition, a)
	        elif current in ('thunderstorm', 'chance_of_tstorm') and self.notif == 'O':
	            self.notify(self.condition,a,severe=True)
	            
        gconfClient.set_string("/apps/indicator-weather/current",self.condition)
        
        self.rateid = gobject.timeout_add(int(self.rate) * 60000, self.update_weather)
            
    def responseToDialog(self, entry, dialog, response):
        dialog.response(response)
        
    def getText(self, replace=True):
        dialog = gtk.MessageDialog(
            None,
            gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT,
            gtk.MESSAGE_QUESTION,
            gtk.BUTTONS_OK,
            None)
        dialog.set_markup('Please enter your address:')
        entry = gtk.Entry()
        entry.connect("activate", self.responseToDialog, dialog, gtk.RESPONSE_OK)
        hbox = gtk.HBox()
        hbox.pack_start(gtk.Label("Address:"), False, 5, 5)
        hbox.pack_end(entry)
        dialog.vbox.pack_end(hbox, True, True, 0)
        dialog.show_all()
        dialog.run()
        if replace == False:
            if not (entry.get_text() in self.places):
                self.places.append(entry.get_text())
                gconfClient.set_string("/apps/indicator-weather/places", str([self.places]))
                dialog.destroy()
                return True
            else:
                dialog.destroy()
                return False
        else:
            self.places = list()
            self.places.append(entry.get_text())
            gconfClient.set_string("/apps/indicator-weather/places", str([self.places]))
        dialog.destroy()
        
        #self.update_weather()
    def get_sun(self,city):
        url = 'http://maps.google.com/maps/api/geocode/json?address='+urllib2.quote(city[0])+'&sensor=false'
        try:
            result = simplejson.load(urllib2.urlopen(url))
            lat,lon = result['results'][0]['geometry']['location']['lat'],result['results'][0]['geometry']['location']['lng']
            now = datetime.datetime.now()
            url = 'http://www.earthtools.org/sun/%s/%s/%s/%s/99/1' % (lat,lon,now.day,now.month)
            f = urllib2.urlopen(url)
            s=f.read()
            parsed = parseString(s)
            sunrise = parsed.getElementsByTagName("sunrise")[0].firstChild.nodeValue
            sunset = parsed.getElementsByTagName("sunset")[0].firstChild.nodeValue
            timezone = parsed.getElementsByTagName("timezone")[0].firstChild.nodeValue
            return sunrise,sunset,timezone
        except urllib2.URLError, error:
			return None
            
    def get_weather(self, city, firstrun=False, extended=False, onlycity=False):
<<<<<<< TREE
        
        if ((len(city) == 1) or (city == "Enter Location")):
            return ""
            
=======
>>>>>>> MERGE-SOURCE
        import locale
        localebad = locale.getlocale()[0]
        locale = localebad.split ('_')
        url = "http://www.google.com/ig/api?weather=" + urllib2.quote(city[0]) + "&hl=" + locale[0]
        
        try:
            # open google weather api url
            f = urllib2.urlopen(url)

        except urllib2.URLError, error:
            # if there was an error opening the url, return
<<<<<<< TREE
            self.temp = "Connection Problem"
            self.city = "Connection Problem"
            self.humid = "Connection Problem"
            self.wind = "Connection Problem"
            self.icon = "Connection Problem"
            return "Error opening url"
=======
            self.temp = _("Connection problem")
            self.city = _("Connection problem")
            self.humid = _("Connection problem")
            self.wind = _("Connection problem")
            self.icon = _("Connection problem")
            return _("Connection problem")
>>>>>>> MERGE-SOURCE
        
        s = f.read()
        encoding = f.headers['content-type'].split('charset=')[-1]
        s = unicode(s, encoding).encode('utf-8').replace("&#39;", "'")
        self.unitsystem = s.split("<unit_system data=\"")[-1].split("\"")[0]
        # extract weather condition data from xml string
        if extended == False:
            if onlycity:
                return s.split("<city data=\"")[-1].split("\"")[0]
            else:
                
                weather = s.split("<current_conditions><condition data=\"")[-1].split("\"")[0]
                self.city = s.split("<city data=\"")[-1].split("\"")[0]
                self.cityLabel = city[1]
                if firstrun and self.unitsystem == 'SI':
                        self.unit = 'C'
                        gconfClient.set_string("/apps/indicator-weather/unit", 'C')
                        #self.windunit = 'km/h'
                        #gconfClient.set_string("/apps/indicator-weather/wind", 'km/h')
                
                if self.unit == 'F':
                    self.temp = s.split("<temp_f data=\"")[-1].split("\"")[0] + "°F"
                elif self.unit == 'C':
                    self.temp = s.split("<temp_c data=\"")[-1].split("\"")[0] + "°C"
                else:
                    self.temp = str(int(s.split("<temp_c data=\"")[-1].split("\"")[0])+273) + "°K"
                
                self.humid = s.split("<humidity data=\"")[-1].split("\"")[0]
                self.wind = s.split("<wind_condition data=\"")[-1].split("\"")[0]
                
                #windvalue = int(''.join(filter(lambda x: x.isdigit(), self.wind)))
                #if unitsystem == 'US':
                    #windvalue = int(round(float(windvalue*1.609344)))
                #if self.windunit == 'm/s':
                    #windvalue = int(round(float(windvalue/3.6)))
                #elif self.windunit == 'mph':
                    #print 'im here'
                    #windvalue = int(round(float(windvalue/1.609344)))
                    #print windvalue
                #elif self.windunit == 'knots':
                    #windvalue = int(round(float(windvalue/1.852)))
                #elif self.windunit == 'Beaufort':
                    #if windvalue < 1:
                        #windvalue = 0
                    #elif windvalue >= 1 and windvalue < 5:
                        #windvalue = 1
                    #elif windvalue >= 6 and windvalue < 11:
                        #windvalue = 2
                    #elif windvalue >= 12 and windvalue < 19:
                        #windvalue = 3
                    #elif windvalue >= 20 and windvalue < 28:
                        #windvalue = 4
                    #elif windvalue >= 29 and windvalue < 38:
                        #windvalue = 5
                    #elif windvalue >= 39 and windvalue < 49:
                        #windvalue = 6
                    #elif windvalue >= 50 and windvalue < 61:
                        #windvalue = 7
                    #elif windvalue >= 62 and windvalue < 74:
                        #windvalue = 8
                    #elif windvalue >= 75 and windvalue < 88:
                        #windvalue = 9
                    #elif windvalue >= 89 and windvalue < 102:
                        #windvalue = 10
                    #elif windvalue >= 103 and windvalue < 117:
                        #windvalue = 11
                    #elif windvalue >= 118:
                        #windvalue = 12
                #self.wind = self.wind.replace((''.join(filter(lambda x: x.isdigit(), self.wind))),str(windvalue))
                
                self.icon = s.split("%\"/><icon data=\"/ig/images/weather/")[-1].split(".gif\"")[0]
        
                # if there was an error getting the condition, the city is invalid
                if weather == "<?xml version=":
                    self.temp = "Invalid city"
                    self.city = "Invalid city"
                    self.cityLabel = "Invalid city"
                    self.humid = "Invalid city"
                    self.wind = "Invalid city"
                    return "Invalid city"
        
                #return the weather condition
                return weather
        else:
            parsed = parseString(s)
            self.daysofweek=[]
            for day_of_week in parsed.getElementsByTagName("day_of_week"):
                self.daysofweek.append([day_of_week.attributes["data"].value][0])
            self.lowdata=[]
            for low in parsed.getElementsByTagName("low"):
                if (wi.unit == 'C' and wi.unitsystem == 'SI') or (wi.unit == 'F' and wi.unitsystem == 'US'):
                    self.lowdata.append([low.attributes["data"].value][0])
                else:
                    if wi.unit == 'C':
                        self.lowdata.append(int((((int([low.attributes["data"].value][0]))-32)*5)/9))
                    elif wi.unit == 'F':
                        self.lowdata.append(int(((int([low.attributes["data"].value][0])*9)/5)+32))
                    elif wi.unitsystem == 'SI':
                        self.lowdata.append((int([low.attributes["data"].value][0]))+273)
                    else:
                        self.lowdata.append(int(((((int([low.attributes["data"].value][0]))-32)*5)/9)+273))
            self.highdata=[]
            for high in parsed.getElementsByTagName("high"):
                if (wi.unit == 'C' and wi.unitsystem == 'SI') or (wi.unit == 'F' and wi.unitsystem == 'US'):
                    self.highdata.append([high.attributes["data"].value][0])
                else:
                    if wi.unit == 'C':
                        self.highdata.append(int((((int([high.attributes["data"].value][0]))-32)*5)/9))
                    elif wi.unit == 'F':
                        self.highdata.append(int(((int([high.attributes["data"].value][0])*9)/5)+32))
                    elif wi.unitsystem == 'SI':
                        self.highdata.append((int([high.attributes["data"].value][0]))+273)
                    else:
                        self.highdata.append(int(((((int([high.attributes["data"].value][0]))-32)*5)/9)+273))
            self.icons=[]
            for icon in parsed.getElementsByTagName("icon"):
                self.icons.append([icon.attributes["data"].value][0].split("/ig/images/weather/")[-1].split(".gif")[0])
            self.conditions=[]
            for condition in parsed.getElementsByTagName("condition"):
                self.conditions.append([condition.attributes["data"].value][0])
        
    def prefs(self, widget):
        self.prefswindow = PreferencesDialog()
        self.prefswindow.show()
        
    def extforecast(self,widget):
        forecastwd = ExtendedForecast()
        forecastwd.show()
        
    def addlocation(self,widget):
        self.getText()
        self.menu_normal()
        self.place = self.places[self.placechosen]
        self.update_weather(False)
        self.winder.set_menu(self.menu)
        
    def notify(self,conditon,icon,severe=False):
        if severe:
			n = pynotify.Notification (_("Severe weather alert"),
                self.condition,
                icon)
        else:
		    n = pynotify.Notification (self.condition,
               "",
               icon)
        n.show ()


class PreferencesDialog(gtk.Dialog):
    __gtype_name__ = "PreferencesDialog"
    def __new__(cls):
        builder = get_builder('PreferencesDialog')
        new_object = builder.get_object("preferences_dialog")
        new_object.finish_initializing(builder)
        return new_object

    def finish_initializing(self, builder):
        self.builder = builder
        if wi.unit == 'F':
            self.builder.get_object('fahrenheit').set_active(True)
        elif wi.unit == 'C':
            self.builder.get_object('celsius').set_active(True)
        else:
            self.builder.get_object('kelvin').set_active(True)
        if wi.notif == 'N':
            self.builder.get_object('nonotif').set_active(True)
        elif wi.notif == 'O':
            self.builder.get_object('notifsevere').set_active(True)
        else:
            self.builder.get_object('notifall').set_active(True)            
        
        #if wi.windunit == 'm/s':
            #self.builder.get_object('m/s').set_active(True)
        #elif wi.windunit == 'km/h':
            #self.builder.get_object('km/h').set_active(True)
        #elif wi.windunit == 'mph':
            #self.builder.get_object('mph').set_active(True)
        #elif wi.windunit == 'knots':
            #self.builder.get_object('knots').set_active(True)
        #else:
            #self.builder.get_object('Beaufort').set_active(True)
        
        self.builder.get_object('rate').set_value(wi.rate)
        end = len(wi.places)
        for place in wi.places:
            newplace = list()
            newplace.append(place[0])
            newplace.append(place[1])
            
            self.builder.get_object('citieslist').append(newplace)
            
        self.builder.connect_signals(self)
        
    def on_remove_location(self,widget):
        selection = self.builder.get_object('displaylist').get_selection()
        model, iter = selection.get_selected()
        if iter != None:
            model.remove(iter)
    
    def on_add_location(self, widget):
        self.assistant2 = Assistant2()
        self.assistant2.show()
    
    def on_wind_activate(self, widget):
        pass
    
    def on_destroy(self, widget, data=None):
        pass
        #"""Called when the WeatherIndicatorWindow is closed."""
        #gtk.main_quit()
    #def on_city_edited(self,widget,path,value):
        ###CHECK AVAILABILITY
        #self.builder.get_object('citieslist').set_value(self.builder.get_object('citieslist').get_iter_from_string(path), 0, value)
    
    def ok(self, widget, data=None):
        """The user has elected to save the changes.

        Called before the dialog returns gtk.RESONSE_OK from run().
        """
        needupdate = False
        ##Temperature##
        for button in self.builder.get_object('fahrenheit').get_group():
            if button.get_active() == True and button.get_label()[0] != wi.unit:
                gconfClient.set_string("/apps/indicator-weather/unit", button.get_label()[0])
                wi.unit = button.get_label()[0]
                needupdate = True
                print 'Unit changed :', wi.unit
                
        for button in self.builder.get_object('nonotif').get_group():
            if button.get_active() == True and button.get_label()[0] != wi.notif:
                gconfClient.set_string("/apps/indicator-weather/notif", button.get_label()[0])
                wi.notif = button.get_label()[0]
                print 'Notifications changed :', wi.notif
                
        ##Rate
        if int(self.builder.get_object('rate').get_value()) != wi.rate:
            gconfClient.set_int("/apps/indicator-weather/refresh_rate", int(self.builder.get_object('rate').get_value()))
            wi.rate = int(self.builder.get_object('rate').get_value())
            gobject.source_remove(wi.rateid)
            wi.rateid = gobject.timeout_add(int(wi.rate) * 60000, wi.update_weather)
            print 'Rate changed :',wi.rate
            
        ##places
        newplaces = list()
        item = self.builder.get_object('citieslist').get_iter_first()
        while ( item != None ):
            newplace = list()
            newplace.append(self.builder.get_object('citieslist').get_value (item, 0))
            newplace.append(self.builder.get_object('citieslist').get_value (item, 1))
            newplaces.append(newplace)
            item = self.builder.get_object('citieslist').iter_next(item)
        if newplaces != wi.places:
            wi.places = newplaces
            if len(wi.places) >= 1:
                gconfClient.set_string("/apps/indicator-weather/places", str(wi.places))
                if wi.place in wi.places:
                    wi.placechosen = wi.places.index(wi.place)
                else:
                    wi.placechosen = 0
                gconfClient.set_int("/apps/indicator-weather/placechosen", wi.placechosen)
                wi.rebuild_menu()
                needupdate = True
            else:
                wi.placechosen = 0
                gconfClient.set_int("/apps/indicator-weather/placechosen", wi.placechosen)
                gconfClient.set_string("/apps/indicator-weather/places", str([wi.places]))
                wi.winder.set_icon("weather-clear")
                wi.menu_noplace()
                needupdate = False
            
        ##Wind
        #for button in self.builder.get_object('m/s').get_group():
            #if button.get_active() == True and button.get_label() != wi.windunit:
                #gconfClient.set_string("/apps/indicator-weather/wind", button.get_label())
                #wi.windunit = button.get_label()
                #needupdate = True
                #print 'Wind changed :', wi.windunit
        
        if needupdate:
            wi.update_weather(False)
        
        # Make any updates to self._preferences here. e.g.
        #self._preferences["preference1"] = "value2"
        #self._save_preferences()
        self.destroy()

    def cancel(self, widget, data=None):
        """The user has elected cancel changes.

        Called before the dialog returns gtk.RESPONSE_CANCEL for run()
        """
        # Restore any changes to self._preferences here.
        self.destroy()
        
class ExtendedForecast(gtk.Window):
    __gtype_name__ = "ExtendedForecast"
    def __new__(cls):
        builder = get_builder('ExtendedForecast')
        new_object = builder.get_object("extended_forecast")
        new_object.finish_initializing(builder)
        return new_object
        
    def finish_initializing(self, builder):
        self.builder = builder
        self.builder.connect_signals(self)
        
        self.builder.get_object('extended_forecast').set_title(_('Weather Forecast for ')+wi.places[wi.placechosen][1])
        
        wi.get_weather(wi.places[wi.placechosen],False,True)
        
        self.builder.get_object('day1lbl').set_label('<big>'+wi.daysofweek[0].capitalize()+'</big>')
        self.builder.get_object('day2lbl').set_label('<big>'+wi.daysofweek[1].capitalize()+'</big>')
        self.builder.get_object('day3lbl').set_label('<big>'+wi.daysofweek[2].capitalize()+'</big>')
        self.builder.get_object('day4lbl').set_label('<big>'+wi.daysofweek[3].capitalize()+'</big>')
        i=0
        for icon in wi.icons[1:]:
            i=i+1
            if icon in ('chance_of_storm', 'storm', 'thunderstorm', 'chance_of_tstorm'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-storm',gtk.ICON_SIZE_BUTTON)
            elif icon in ('sleet',  'snow',  'icy',  'flurries',  'chance_of_snow'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-snow',gtk.ICON_SIZE_BUTTON)
            elif icon in ('dust',  'fog',  'smoke',  'haze',  'mist'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-fog',gtk.ICON_SIZE_BUTTON)
            elif icon in ('rain'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-showers',gtk.ICON_SIZE_BUTTON)
            elif icon in ('chance_of_rain'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-showers-scattered',gtk.ICON_SIZE_BUTTON)
            elif icon in ('sunny', 'clear'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-clear',gtk.ICON_SIZE_BUTTON)
            elif icon in ('mostly_cloudy', 'cloudy'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-overcast',gtk.ICON_SIZE_BUTTON)
            elif icon in ('mostly_sunny',  'partly_cloudy'):
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('weather-few-clouds',gtk.ICON_SIZE_BUTTON)
            else:
                self.builder.get_object('day%simage' % str(i)).set_from_icon_name('window-close',gtk.ICON_SIZE_BUTTON)
        i=0
        for condition in wi.conditions[1:]:
            i=i+1
            self.builder.get_object('day%scond' % str(i)).set_label(condition)
        i=0
        if wi.unit == 'C':
            tempunit = '°C'
        elif wi.unit == 'F':
            tempunit = '°F'
        else:
            tempunit = '°K'
        for high in wi.highdata:
            i=i+1
            self.builder.get_object('day%stemphigh' % str(i)).set_label(_('High : %s%s') % (high,tempunit))
        i=0
        for low in wi.lowdata:
            i=i+1
            self.builder.get_object('day%stemplow' % str(i)).set_label(_('Low : %s%s') % (low,tempunit))
        
    
    def close(self, widget, data=None):
        self.destroy()
    
    def on_destroy(self, widget, data=None):
        pass
        
#class EditPlace(gtk.MessageDialog):
    #__gtype_name__ = "EditPlace"
    #def __new__(cls):
        #builder = get_builder('EditPlace')
        #new_object = builder.get_object("edit_place")
        #new_object.finish_initializing(builder)
        #return new_object
        
    #def finish_initializing(self, builder):
        #self.builder = builder
        #self.builder.connect_signals(self)
    
    #def ok(self, widget, data=None):
        #self.destroy()
        #if self.builder.get_object("entry").get_text() != '':
            #return self.builder.get_object("entry").get_text()
        #else:
            #return False
        ###APPLY CHANGES
        
    #def cancel(self, widget, data=None):
        #"""The user has elected cancel changes.

        #Called before the dialog returns gtk.RESPONSE_CANCEL for run()
        #"""
        ## Restore any changes to self._preferences here.
        #self.destroy()
        #return False

class Assistant(gtk.Assistant):
    __gtype_name__ = "Assistant"
    def __new__(cls):
        builder = get_builder('Assistant')
        new_object = builder.get_object("assistant")
        new_object.finish_initializing(builder)
        return new_object
        
    def finish_initializing(self, builder):
        self.builder = builder
        self.builder.connect_signals(self)
        self.builder.get_object("assistant").set_page_complete(self.builder.get_object("chooseunit"),True)
        self.builder.get_object("assistant").set_page_complete(self.builder.get_object("label"),True)
        self.builder.get_object("assistant").set_page_complete(self.builder.get_object("review"),True)
        self.builder.get_object("assistant").set_forward_page_func(self.get_city)
        
    def on_find_location(self,widget):
        def get_my_ip_address():
            whatismyip = 'http://www.whatismyip.com/automation/n09230945.asp'
            return urllib2.urlopen(whatismyip).readlines()[0]
        response = urllib2.urlopen('http://api.hostip.info/get_html.php?ip=%s' % get_my_ip_address()).read()
        m = re.search('City: (.*)', response)
        if m:
            self.builder.get_object("entry").set_text(m.group(1))
    def on_entry_edited(self,widget):
        if widget.get_text() == '':
            self.builder.get_object("assistant").set_page_complete(self.builder.get_object("placeinput"),False)
        else:
            self.builder.get_object("assistant").set_page_complete(self.builder.get_object("placeinput"),True)
    
    def get_city(self,current_page):
        if self.builder.get_object("assistant").get_current_page() == 1:
            self.label = wi.get_weather([self.builder.get_object("entry").get_text()],onlycity=True)
            if not self.label in ('Error opening url','<?xml version='):
                self.builder.get_object("lblplace").set_label('<big>'+self.label+'</big>')
                self.builder.get_object("assistant").set_page_complete(self.builder.get_object("confirmplace"),True)
                return 3
            else:
                return 2
        elif self.builder.get_object("assistant").get_current_page() == 4:
            lbl = self.builder.get_object("entrylbl").get_text()
            if lbl == '':
                self.builder.get_object("labellbl").set_label('<b>No Label</b>')
                self.builder.get_object("lbl3").set_label('')
            else:
                self.builder.get_object("labellbl").set_label('<b>'+self.builder.get_object("entrylbl").get_text()+'</b>')
                self.builder.get_object("lbl3").set_label('Label:')
            for button in self.builder.get_object('fahrenheit').get_group():
                if button.get_active() == True:
                    self.builder.get_object("unitlbl").set_label('<b>'+button.get_label()+'</b>')
            self.builder.get_object("placelbl").set_label('<b>'+self.label+'</b>')
            
        return self.builder.get_object("assistant").get_current_page() + 1
            
    def on_cancel(self,widget):
        self.destroy()
        
    def on_apply(self,widget):
<<<<<<< TREE
        wi.placeadded = self.label
        wi.unit = self.builder.get_object("unitlbl").get_text()[0]
        gconfClient.set_string("/apps/indicator-weather/unit", str(wi.unit))
        self.hide()
=======
        _city_name = self.label
        _city_label = self.builder.get_object("entrylbl").get_text()
        places = list()
        places.append(_city_name)
        if (_city_label == ''):
            _city_label = _city_name
        places.append(_city_label)

        wi.placeadded = _city_name
>>>>>>> MERGE-SOURCE
        wi.places = list()
        wi.places.append(places)
        
        self.hide()
        gconfClient.set_string("/apps/indicator-weather/places", str(wi.places))
        wi.menu_normal()
        wi.place = wi.places[wi.placechosen]
        wi.update_weather(False)
        wi.winder.set_menu(wi.menu)
        
class Assistant2(gtk.Assistant):
    __gtype_name__ = "Assistant2"
    def __new__(cls):
        builder = get_builder('Assistant2')
        new_object = builder.get_object("assistant2")
        new_object.finish_initializing(builder)
        return new_object
        
    def finish_initializing(self, builder):
        self.builder = builder
        self.builder.connect_signals(self)
        self.builder.get_object("assistant2").set_page_complete(self.builder.get_object("label"),True)
        self.builder.get_object("assistant2").set_forward_page_func(self.get_city)
        
    def on_find_location(self,widget):
        def get_my_ip_address():
            whatismyip = 'http://www.whatismyip.com/automation/n09230945.asp'
            return urllib2.urlopen(whatismyip).readlines()[0]
        response = urllib2.urlopen('http://api.hostip.info/get_html.php?ip=%s' % get_my_ip_address()).read()
        m = re.search('City: (.*)', response)
        if m:
            self.builder.get_object("entry").set_text(m.group(1))
    def on_entry_edited(self,widget):
        if widget.get_text() == '':
            self.builder.get_object("assistant2").set_page_complete(self.builder.get_object("placeinput"),False)
        else:
            self.builder.get_object("assistant2").set_page_complete(self.builder.get_object("placeinput"),True)
    
    def get_city(self,current_page):
        if self.builder.get_object("assistant2").get_current_page() == 0:
            self.label = wi.get_weather([self.builder.get_object("entry").get_text()],onlycity=True)
            if not self.label in ('Error opening url','<?xml version='):
                self.builder.get_object("lblplace").set_label('<big>'+self.label+'</big>')
                self.builder.get_object("assistant2").set_page_complete(self.builder.get_object("confirmplace"),True)
                return 2
            else:
                return 1
        return self.builder.get_object("assistant2").get_current_page() + 1
            
    def on_cancel(self,widget):
        self.destroy()
        
    def on_apply(self,widget):
        _city_name = self.label
        _city_label = self.builder.get_object("entrylbl").get_text()
        newplace = list()
        newplace.append(_city_name)
        if (_city_label == ''):
            _city_label = _city_name
        newplace.append(_city_label)
        wi.prefswindow.builder.get_object('citieslist').append(newplace)
        self.hide()
        
#class IndicatorMenu(gtk.Menu):
    #__gtype_name__ = "IndicatorMenu"
    #def __new__(cls):
        #builder = get_builder('IndicatorMenu')
        #new_object = builder.get_object("indicator_menu")
        #new_object.finish_initializing(builder)
        #return new_object
        
    #def finish_initializing(self, builder):
        #self.builder = builder
        #self.builder.connect_signals(self)

def main():
    gtk.main()
    return 0

if __name__ == "__main__":
    wi = indicator_weather()
    main()
